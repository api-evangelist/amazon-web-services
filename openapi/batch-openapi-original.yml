openapi: 3.1.0
info:
  title: batch
  description: >-
    <fullname>Batch</fullname> <p>Using Batch, you can run batch computing
    workloads on the Amazon Web Services Cloud. Batch computing is a common
    means for developers, scientists, and engineers to access large amounts of
    compute resources. Batch uses the advantages of the batch computing to
    remove the undifferentiated heavy lifting of configuring and managing
    required infrastructure. At the same time, it also adopts a familiar batch
    computing software approach. You can use Batch to efficiently provision
    resources d, and work toward eliminating capacity constraints, reducing your
    overall compute costs, and delivering results more quickly.</p> <p>As a
    fully managed service, Batch can run batch computing workloads of any scale.
    Batch automatically provisions compute resources and optimizes workload
    distribution based on the quantity and scale of your specific workloads.
    With Batch, there's no need to install or manage batch computing software.
    This means that you can focus on analyzing results and solving your specific
    problems instead.</p>
paths:
  /v1/canceljob:
    POST:
      summary: Canceljob
      description: >-
        Cancels a job in an Batch job queue. Jobs that are in the SUBMITTED or
        PENDING are canceled. A job inRUNNABLE remains in RUNNABLE until it
        reaches the head of the job queue. Then the job status is updated to
        FAILED.  A PENDING job is canceled after all dependency jobs are
        completed. Therefore, it may take longer than expected to cancel a job
        in PENDING status. When you try to cancel an array parent job in
        PENDING, Batch attempts to cancel all child jobs. The array parent job
        is canceled when all child jobs are completed.  Jobs that progressed to
        the STARTING or RUNNING state aren't canceled. However, the API
        operation still succeeds, even if no job is canceled. These jobs must be
        terminated with the TerminateJob operation.
      operationId: amazonWebServicesCancelJob
  /v1/createcomputeenvironment:
    POST:
      summary: Createcomputeenvironment
      description: >-
        Creates an Batch compute environment. You can create MANAGED or
        UNMANAGED compute environments. MANAGED compute environments can use
        Amazon EC2 or Fargate resources. UNMANAGED compute environments can only
        use EC2 resources. In a managed compute environment, Batch manages the
        capacity and instance types of the compute resources within the
        environment. This is based on the compute resource specification that
        you define or the launch template that you specify when you create the
        compute environment. Either, you can choose to use EC2 On-Demand
        Instances and EC2 Spot Instances. Or, you can use Fargate and Fargate
        Spot capacity in your managed compute environment. You can optionally
        set a maximum price so that Spot Instances only launch when the Spot
        Instance price is less than a specified percentage of the On-Demand
        price.  Multi-node parallel jobs aren't supported on Spot Instances.  In
        an unmanaged compute environment, you can manage your own EC2 compute
        resources and have flexibility with how you configure your compute
        resources. For example, you can use custom AMIs. However, you must
        verify that each of your AMIs meet the Amazon ECS container instance AMI
        specification. For more information, see container instance AMIs in the
        Amazon Elastic Container Service Developer Guide. After you created your
        unmanaged compute environment, you can use the
        DescribeComputeEnvironments operation to find the Amazon ECS cluster
        that's associated with it. Then, launch your container instances into
        that Amazon ECS cluster. For more information, see Launching an Amazon
        ECS container instance in the Amazon Elastic Container Service Developer
        Guide.  To create a compute environment that uses EKS resources, the
        caller must have permissions to call eks:DescribeCluster.   Batch
        doesn't automatically upgrade the AMIs in a compute environment after
        it's created. For example, it also doesn't update the AMIs in your
        compute environment when a newer version of the Amazon ECS optimized AMI
        is available. You're responsible for the management of the guest
        operating system. This includes any updates and security patches. You're
        also responsible for any additional application software or utilities
        that you install on the compute resources. There are two ways to use a
        new AMI for your Batch jobs. The original method is to complete these
        steps:   Create a new compute environment with the new AMI.   Add the
        compute environment to an existing job queue.   Remove the earlier
        compute environment from your job queue.   Delete the earlier compute
        environment.   In April 2022, Batch added enhanced support for updating
        compute environments. For more information, see Updating compute
        environments. To use the enhanced updating of compute environments to
        update AMIs, follow these rules:   Either don't set the service role
        (serviceRole) parameter or set it to the AWSBatchServiceRole
        service-linked role.   Set the allocation strategy (allocationStrategy)
        parameter to BEST_FIT_PROGRESSIVE, SPOT_CAPACITY_OPTIMIZED, or
        SPOT_PRICE_CAPACITY_OPTIMIZED.   Set the update to latest image version
        (updateToLatestImageVersion) parameter to true. The
        updateToLatestImageVersion parameter is used when you update a compute
        environment. This parameter is ignored when you create a compute
        environment.   Don't specify an AMI ID in imageId, imageIdOverride (in 
        ec2Configuration ), or in the launch template (launchTemplate). In that
        case, Batch selects the latest Amazon ECS optimized AMI that's supported
        by Batch at the time the infrastructure update is initiated.
        Alternatively, you can specify the AMI ID in the imageId or
        imageIdOverride parameters, or the launch template identified by the
        LaunchTemplate properties. Changing any of these properties starts an
        infrastructure update. If the AMI ID is specified in the launch
        template, it can't be replaced by specifying an AMI ID in either the
        imageId or imageIdOverride parameters. It can only be replaced by
        specifying a different launch template, or if the launch template
        version is set to $Default or $Latest, by setting either a new default
        version for the launch template (if $Default) or by adding a new version
        to the launch template (if $Latest).   If these rules are followed, any
        update that starts an infrastructure update causes the AMI ID to be
        re-selected. If the version setting in the launch template
        (launchTemplate) is set to $Latest or $Default, the latest or default
        version of the launch template is evaluated up at the time of the
        infrastructure update, even if the launchTemplate wasn't updated. 
      operationId: amazonWebServicesCreateComputeEnvironment
  /v1/createjobqueue:
    POST:
      summary: Createjobqueue
      description: >-
        Creates an Batch job queue. When you create a job queue, you associate
        one or more compute environments to the queue and assign an order of
        preference for the compute environments. You also set a priority to the
        job queue that determines the order that the Batch scheduler places jobs
        onto its associated compute environments. For example, if a compute
        environment is associated with more than one job queue, the job queue
        with a higher priority is given preference for scheduling jobs to that
        compute environment.
      operationId: amazonWebServicesCreateJobQueue
  /v1/createschedulingpolicy:
    POST:
      summary: Createschedulingpolicy
      description: Creates an Batch scheduling policy.
      operationId: amazonWebServicesCreateSchedulingPolicy
  /v1/deletecomputeenvironment:
    POST:
      summary: Deletecomputeenvironment
      description: >-
        Deletes an Batch compute environment. Before you can delete a compute
        environment, you must set its state to DISABLED with the
        UpdateComputeEnvironment API operation and disassociate it from any job
        queues with the UpdateJobQueue API operation. Compute environments that
        use Fargate resources must terminate all active jobs on that compute
        environment before deleting the compute environment. If this isn't done,
        the compute environment enters an invalid state.
      operationId: amazonWebServicesDeleteComputeEnvironment
  /v1/deletejobqueue:
    POST:
      summary: Deletejobqueue
      description: >-
        Deletes the specified job queue. You must first disable submissions for
        a queue with the UpdateJobQueue operation. All jobs in the queue are
        eventually terminated when you delete a job queue. The jobs are
        terminated at a rate of about 16 jobs each second. It's not necessary to
        disassociate compute environments from a queue before submitting a
        DeleteJobQueue request.
      operationId: amazonWebServicesDeleteJobQueue
  /v1/deleteschedulingpolicy:
    POST:
      summary: Deleteschedulingpolicy
      description: >-
        Deletes the specified scheduling policy. You can't delete a scheduling
        policy that's used in any job queues.
      operationId: amazonWebServicesDeleteSchedulingPolicy
  /v1/deregisterjobdefinition:
    POST:
      summary: Deregisterjobdefinition
      description: >-
        Deregisters an Batch job definition. Job definitions are permanently
        deleted after 180 days.
      operationId: amazonWebServicesDeregisterJobDefinition
  /v1/describecomputeenvironments:
    POST:
      summary: Describecomputeenvironments
      description: >-
        Describes one or more of your compute environments. If you're using an
        unmanaged compute environment, you can use the
        DescribeComputeEnvironment operation to determine the ecsClusterArn that
        you launch your Amazon ECS container instances into.
      operationId: amazonWebServicesDescribeComputeEnvironments
  /v1/describejobdefinitions:
    POST:
      summary: Describejobdefinitions
      description: >-
        Describes a list of job definitions. You can specify a status (such as
        ACTIVE) to only return job definitions that match that status.
      operationId: amazonWebServicesDescribeJobDefinitions
  /v1/describejobqueues:
    POST:
      summary: Describejobqueues
      description: Describes one or more of your job queues.
      operationId: amazonWebServicesDescribeJobQueues
  /v1/describejobs:
    POST:
      summary: Describejobs
      description: Describes a list of Batch jobs.
      operationId: amazonWebServicesDescribeJobs
  /v1/describeschedulingpolicies:
    POST:
      summary: Describeschedulingpolicies
      description: Describes one or more of your scheduling policies.
      operationId: amazonWebServicesDescribeSchedulingPolicies
  /v1/listjobs:
    POST:
      summary: Listjobs
      description: >-
        Returns a list of Batch jobs. You must specify only one of the following
        items:   A job queue ID to return a list of jobs in that job queue   A
        multi-node parallel job ID to return a list of nodes for that job   An
        array job ID to return a list of the children for that job   You can
        filter the results by job status with the jobStatus parameter. If you
        don't specify a status, only RUNNING jobs are returned.
      operationId: amazonWebServicesListJobs
  /v1/listschedulingpolicies:
    POST:
      summary: Listschedulingpolicies
      description: Returns a list of Batch scheduling policies.
      operationId: amazonWebServicesListSchedulingPolicies
  /v1/tags/{resourceArn}:
    DELETE:
      summary: Untagresource
      description: Deletes specified tags from an Batch resource.
      operationId: amazonWebServicesUntagResource
  /v1/registerjobdefinition:
    POST:
      summary: Registerjobdefinition
      description: Registers an Batch job definition.
      operationId: amazonWebServicesRegisterJobDefinition
  /v1/submitjob:
    POST:
      summary: Submitjob
      description: >-
        Submits an Batch job from a job definition. Parameters that are
        specified during SubmitJob override parameters defined in the job
        definition. vCPU and memory requirements that are specified in the
        resourceRequirements objects in the job definition are the exception.
        They can't be overridden this way using the memory and vcpus parameters.
        Rather, you must specify updates to job definition parameters in a
        resourceRequirements object that's included in the containerOverrides
        parameter.  Job queues with a scheduling policy are limited to 500
        active fair share identifiers at a time.    Jobs that run on Fargate
        resources can't be guaranteed to run for more than 14 days. This is
        because, after 14 days, Fargate resources might become unavailable and
        job might be terminated. 
      operationId: amazonWebServicesSubmitJob
  /v1/terminatejob:
    POST:
      summary: Terminatejob
      description: >-
        Terminates a job in a job queue. Jobs that are in the STARTING or
        RUNNING state are terminated, which causes them to transition to FAILED.
        Jobs that have not progressed to the STARTING state are cancelled.
      operationId: amazonWebServicesTerminateJob
  /v1/updatecomputeenvironment:
    POST:
      summary: Updatecomputeenvironment
      description: Updates an Batch compute environment.
      operationId: amazonWebServicesUpdateComputeEnvironment
  /v1/updatejobqueue:
    POST:
      summary: Updatejobqueue
      description: Updates a job queue.
      operationId: amazonWebServicesUpdateJobQueue
  /v1/updateschedulingpolicy:
    POST:
      summary: Updateschedulingpolicy
      description: Updates a scheduling policy.
      operationId: amazonWebServicesUpdateSchedulingPolicy
tags: []
