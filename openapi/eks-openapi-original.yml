openapi: 3.1.0
info:
  title: eks
  description: >-
    <p>Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that
    makes it easy for you to run Kubernetes on Amazon Web Services without
    needing to setup or maintain your own Kubernetes control plane. Kubernetes
    is an open-source system for automating the deployment, scaling, and
    management of containerized applications.</p> <p>Amazon EKS runs up-to-date
    versions of the open-source Kubernetes software, so you can use all the
    existing plugins and tooling from the Kubernetes community. Applications
    running on Amazon EKS are fully compatible with applications running on any
    standard Kubernetes environment, whether running in on-premises data centers
    or public clouds. This means that you can easily migrate any standard
    Kubernetes application to Amazon EKS without any code modification
    required.</p>
paths:
  /clusters/{name}/access-entries/{principalArn}/access-policies:
    GET:
      summary: Listassociatedaccesspolicies
      description: Lists the access policies associated with an access entry.
      operationId: amazonWebServicesListAssociatedAccessPolicies
  /clusters/{name}/encryption-config/associate:
    POST:
      summary: Associateencryptionconfig
      description: >-
        Associates an encryption configuration to an existing cluster. Use this
        API to enable encryption on existing clusters that don't already have
        encryption enabled. This allows you to implement a defense-in-depth
        security strategy without migrating applications to new Amazon EKS
        clusters.
      operationId: amazonWebServicesAssociateEncryptionConfig
  /clusters/{name}/identity-provider-configs/associate:
    POST:
      summary: Associateidentityproviderconfig
      description: >-
        Associates an identity provider configuration to a cluster. If you want
        to authenticate identities using an identity provider, you can create an
        identity provider configuration and associate it to your cluster. After
        configuring authentication to your cluster you can create Kubernetes
        Role and ClusterRole objects, assign permissions to them, and then bind
        them to the identities using Kubernetes RoleBinding and
        ClusterRoleBinding objects. For more information see Using RBAC
        Authorization in the Kubernetes documentation.
      operationId: amazonWebServicesAssociateIdentityProviderConfig
  /clusters/{name}/access-entries:
    GET:
      summary: Listaccessentries
      description: Lists the access entries for your cluster.
      operationId: amazonWebServicesListAccessEntries
  /clusters/{name}/addons:
    GET:
      summary: Listaddons
      description: Lists the installed add-ons.
      operationId: amazonWebServicesListAddons
  /clusters:
    GET:
      summary: Listclusters
      description: >-
        Lists the Amazon EKS clusters in your Amazon Web Services account in the
        specified Amazon Web Services Region.
      operationId: amazonWebServicesListClusters
  /eks-anywhere-subscriptions:
    GET:
      summary: Listeksanywheresubscriptions
      description: Displays the full description of the subscription.
      operationId: amazonWebServicesListEksAnywhereSubscriptions
  /clusters/{name}/fargate-profiles:
    GET:
      summary: Listfargateprofiles
      description: >-
        Lists the Fargate profiles associated with the specified cluster in your
        Amazon Web Services account in the specified Amazon Web Services Region.
      operationId: amazonWebServicesListFargateProfiles
  /clusters/{name}/node-groups:
    GET:
      summary: Listnodegroups
      description: >-
        Lists the managed node groups associated with the specified cluster in
        your Amazon Web Services account in the specified Amazon Web Services
        Region. Self-managed node groups aren't listed.
      operationId: amazonWebServicesListNodegroups
  /clusters/{name}/pod-identity-associations:
    GET:
      summary: Listpodidentityassociations
      description: >-
        List the EKS Pod Identity associations in a cluster. You can filter the
        list by the namespace that the association is in or the service account
        that the association uses.
      operationId: amazonWebServicesListPodIdentityAssociations
  /clusters/{name}/access-entries/{principalArn}:
    POST:
      summary: Updateaccessentry
      description: Updates an access entry.
      operationId: amazonWebServicesUpdateAccessEntry
  /clusters/{name}/addons/{addonName}:
    GET:
      summary: Describeaddon
      description: Describes an Amazon EKS add-on.
      operationId: amazonWebServicesDescribeAddon
  /clusters/{name}:
    GET:
      summary: Describecluster
      description: >-
        Describes an Amazon EKS cluster. The API server endpoint and certificate
        authority data returned by this operation are required for kubelet and
        kubectl to communicate with your Kubernetes API server. For more
        information, see Creating or updating a kubeconfig file for an Amazon
        EKS cluster.  The API server endpoint and certificate authority data
        aren't available until the cluster reaches the ACTIVE state. 
      operationId: amazonWebServicesDescribeCluster
  /eks-anywhere-subscriptions/{id}:
    POST:
      summary: Updateeksanywheresubscription
      description: >-
        Update an EKS Anywhere Subscription. Only auto renewal and tags can be
        updated after subscription creation.
      operationId: amazonWebServicesUpdateEksAnywhereSubscription
  /clusters/{name}/fargate-profiles/{fargateProfileName}:
    GET:
      summary: Describefargateprofile
      description: Describes an Fargate profile.
      operationId: amazonWebServicesDescribeFargateProfile
  /clusters/{name}/node-groups/{nodegroupName}:
    GET:
      summary: Describenodegroup
      description: Describes a managed node group.
      operationId: amazonWebServicesDescribeNodegroup
  /clusters/{name}/pod-identity-associations/{associationId}:
    POST:
      summary: Updatepodidentityassociation
      description: >-
        Updates a EKS Pod Identity association. Only the IAM role can be
        changed; an association can't be moved between clusters, namespaces, or
        service accounts. If you need to edit the namespace or service account,
        you need to delete the association and then create a new association
        with your desired settings.
      operationId: amazonWebServicesUpdatePodIdentityAssociation
  /cluster-registrations/{name}:
    DELETE:
      summary: Deregistercluster
      description: >-
        Deregisters a connected cluster to remove it from the Amazon EKS control
        plane. A connected cluster is a Kubernetes cluster that you've connected
        to your control plane using the Amazon EKS Connector.
      operationId: amazonWebServicesDeregisterCluster
  /addons/configuration-schemas:
    GET:
      summary: Describeaddonconfiguration
      description: Returns configuration options.
      operationId: amazonWebServicesDescribeAddonConfiguration
  /addons/supported-versions:
    GET:
      summary: Describeaddonversions
      description: >-
        Describes the versions for an add-on. Information such as the Kubernetes
        versions that you can use the add-on with, the owner, publisher, and the
        type of the add-on are returned.
      operationId: amazonWebServicesDescribeAddonVersions
  /clusters/{name}/identity-provider-configs/describe:
    POST:
      summary: Describeidentityproviderconfig
      description: Describes an identity provider configuration.
      operationId: amazonWebServicesDescribeIdentityProviderConfig
  /clusters/{name}/insights/{id}:
    GET:
      summary: Describeinsight
      description: Returns details about an insight that you specify using its ID.
      operationId: amazonWebServicesDescribeInsight
  /clusters/{name}/updates/{updateId}:
    GET:
      summary: Describeupdate
      description: >-
        Describes an update to an Amazon EKS resource. When the status of the
        update is Succeeded, the update is complete. If an update fails, the
        status is Failed, and an error detail explains the reason for the
        failure.
      operationId: amazonWebServicesDescribeUpdate
  /clusters/{name}/access-entries/{principalArn}/access-policies/{policyArn}:
    DELETE:
      summary: Disassociateaccesspolicy
      description: Disassociates an access policy from an access entry.
      operationId: amazonWebServicesDisassociateAccessPolicy
  /clusters/{name}/identity-provider-configs/disassociate:
    POST:
      summary: Disassociateidentityproviderconfig
      description: >-
        Disassociates an identity provider configuration from a cluster. If you
        disassociate an identity provider from your cluster, users included in
        the provider can no longer access the cluster. However, you can still
        access the cluster with IAM principals.
      operationId: amazonWebServicesDisassociateIdentityProviderConfig
  /access-policies:
    GET:
      summary: Listaccesspolicies
      description: 'Lists the available access policies. '
      operationId: amazonWebServicesListAccessPolicies
  /clusters/{name}/identity-provider-configs:
    GET:
      summary: Listidentityproviderconfigs
      description: Lists the identity provider configurations for your cluster.
      operationId: amazonWebServicesListIdentityProviderConfigs
  /clusters/{name}/insights:
    POST:
      summary: Listinsights
      description: >-
        Returns a list of all insights checked for against the specified
        cluster. You can filter which insights are returned by category,
        associated Kubernetes version, and status.
      operationId: amazonWebServicesListInsights
  /tags/{resourceArn}:
    DELETE:
      summary: Untagresource
      description: Deletes specified tags from an Amazon EKS resource.
      operationId: amazonWebServicesUntagResource
  /clusters/{name}/updates:
    POST:
      summary: Updateclusterversion
      description: >-
        Updates an Amazon EKS cluster to the specified Kubernetes version. Your
        cluster continues to function during the update. The response output
        includes an update ID that you can use to track the status of your
        cluster update with the DescribeUpdate API operation. Cluster updates
        are asynchronous, and they should finish within a few minutes. During an
        update, the cluster status moves to UPDATING (this status transition is
        eventually consistent). When the update is complete (either Failed or
        Successful), the cluster status moves to Active. If your cluster has
        managed node groups attached to it, all of your node groups’ Kubernetes
        versions must match the cluster’s Kubernetes version in order to update
        the cluster to a new Kubernetes version.
      operationId: amazonWebServicesUpdateClusterVersion
  /cluster-registrations:
    POST:
      summary: Registercluster
      description: >-
        Connects a Kubernetes cluster to the Amazon EKS control plane.  Any
        Kubernetes cluster can be connected to the Amazon EKS control plane to
        view current information about the cluster and its nodes.  Cluster
        connection requires two steps. First, send a  RegisterClusterRequest  to
        add it to the Amazon EKS control plane. Second, a Manifest containing
        the activationID and activationCode must be applied to the Kubernetes
        cluster through it's native provider to provide visibility. After the
        manifest is updated and applied, the connected cluster is visible to the
        Amazon EKS control plane. If the manifest isn't applied within three
        days, the connected cluster will no longer be visible and must be
        deregistered using DeregisterCluster.
      operationId: amazonWebServicesRegisterCluster
  /clusters/{name}/addons/{addonName}/update:
    POST:
      summary: Updateaddon
      description: Updates an Amazon EKS add-on.
      operationId: amazonWebServicesUpdateAddon
  /clusters/{name}/update-config:
    POST:
      summary: Updateclusterconfig
      description: >-
        Updates an Amazon EKS cluster configuration. Your cluster continues to
        function during the update. The response output includes an update ID
        that you can use to track the status of your cluster update with
        DescribeUpdate"/&gt;. You can use this API operation to enable or
        disable exporting the Kubernetes control plane logs for your cluster to
        CloudWatch Logs. By default, cluster control plane logs aren't exported
        to CloudWatch Logs. For more information, see Amazon EKS Cluster control
        plane logs in the  Amazon EKS User Guide .  CloudWatch Logs ingestion,
        archive storage, and data scanning rates apply to exported control plane
        logs. For more information, see CloudWatch Pricing.  You can also use
        this API operation to enable or disable public and private access to
        your cluster's Kubernetes API server endpoint. By default, public access
        is enabled, and private access is disabled. For more information, see
        Amazon EKS cluster endpoint access control in the  Amazon EKS User Guide
        . You can also use this API operation to choose different subnets and
        security groups for the cluster. You must specify at least two subnets
        that are in different Availability Zones. You can't change which VPC the
        subnets are from, the subnets must be in the same VPC as the subnets
        that the cluster was created with. For more information about the VPC
        requirements, see
        https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html in
        the  Amazon EKS User Guide . Cluster updates are asynchronous, and they
        should finish within a few minutes. During an update, the cluster status
        moves to UPDATING (this status transition is eventually consistent).
        When the update is complete (either Failed or Successful), the cluster
        status moves to Active.
      operationId: amazonWebServicesUpdateClusterConfig
  /clusters/{name}/node-groups/{nodegroupName}/update-config:
    POST:
      summary: Updatenodegroupconfig
      description: >-
        Updates an Amazon EKS managed node group configuration. Your node group
        continues to function during the update. The response output includes an
        update ID that you can use to track the status of your node group update
        with the DescribeUpdate API operation. Currently you can update the
        Kubernetes labels for a node group or the scaling configuration.
      operationId: amazonWebServicesUpdateNodegroupConfig
  /clusters/{name}/node-groups/{nodegroupName}/update-version:
    POST:
      summary: Updatenodegroupversion
      description: >-
        Updates the Kubernetes version or AMI version of an Amazon EKS managed
        node group. You can update a node group using a launch template only if
        the node group was originally deployed with a launch template. If you
        need to update a custom AMI in a node group that was deployed with a
        launch template, then update your custom AMI, specify the new ID in a
        new version of the launch template, and then update the node group to
        the new version of the launch template. If you update without a launch
        template, then you can update to the latest available AMI version of a
        node group's current Kubernetes version by not specifying a Kubernetes
        version in the request. You can update to the latest AMI version of your
        cluster's current Kubernetes version by specifying your cluster's
        Kubernetes version in the request. For information about Linux versions,
        see Amazon EKS optimized Amazon Linux AMI versions in the Amazon EKS
        User Guide. For information about Windows versions, see Amazon EKS
        optimized Windows AMI versions in the Amazon EKS User Guide.  You cannot
        roll back a node group to an earlier Kubernetes version or AMI version.
        When a node in a managed node group is terminated due to a scaling
        action or update, every Pod on that node is drained first. Amazon EKS
        attempts to drain the nodes gracefully and will fail if it is unable to
        do so. You can force the update if Amazon EKS is unable to drain the
        nodes as a result of a Pod disruption budget issue.
      operationId: amazonWebServicesUpdateNodegroupVersion
tags: []
