openapi: 3.1.0
info:
  title: lambda
  description: >-
    <fullname>Lambda</fullname> <p> <b>Overview</b> </p> <p>Lambda is a compute
    service that lets you run code without provisioning or managing servers.
    Lambda runs your code on a high-availability compute infrastructure and
    performs all of the administration of the compute resources, including
    server and operating system maintenance, capacity provisioning and automatic
    scaling, code monitoring and logging. With Lambda, you can run code for
    virtually any type of application or backend service. For more information
    about the Lambda service, see <a
    href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is
    Lambda</a> in the <b>Lambda Developer Guide</b>.</p> <p>The <i>Lambda API
    Reference</i> provides information about each of the API methods, including
    details about the parameters in each API request and response. </p> <p/>
    <p>You can use Software Development Kits (SDKs), Integrated Development
    Environment (IDE) Toolkits, and command line tools to access the API. For
    installation instructions, see <a href="http://aws.amazon.com/tools/">Tools
    for Amazon Web Services</a>. </p> <p>For a list of Region-specific endpoints
    that Lambda supports, see <a
    href="https://docs.aws.amazon.com/general/latest/gr/lambda-service.html/">Lambda
    endpoints and quotas </a> in the <i>Amazon Web Services General
    Reference.</i>. </p> <p>When making the API calls, you will need to
    authenticate your request by providing a signature. Lambda supports
    signature version 4. For more information, see <a
    href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature
    Version 4 signing process</a> in the <i>Amazon Web Services General
    Reference.</i>. </p> <p> <b>CA certificates</b> </p> <p>Because Amazon Web
    Services SDKs use the CA certificates from your computer, changes to the
    certificates on the Amazon Web Services servers can cause connection
    failures when you attempt to use an SDK. You can prevent these failures by
    keeping your computer's CA certificates and operating system up-to-date. If
    you encounter this issue in a corporate environment and do not manage your
    own computer, you might need to ask an administrator to assist with the
    update process. The following list shows minimum operating system and Java
    versions:</p> <ul> <li> <p>Microsoft Windows versions that have updates from
    January 2005 or later installed contain at least one of the required CAs in
    their trust list. </p> </li> <li> <p>Mac OS X 10.4 with Java for Mac OS X
    10.4 Release 5 (February 2007), Mac OS X 10.5 (October 2007), and later
    versions contain at least one of the required CAs in their trust list. </p>
    </li> <li> <p>Red Hat Enterprise Linux 5 (March 2007), 6, and 7 and CentOS
    5, 6, and 7 all contain at least one of the required CAs in their default
    trusted CA list. </p> </li> <li> <p>Java 1.4.2_12 (May 2006), 5 Update 2
    (March 2005), and all later versions, including Java 6 (December 2006), 7,
    and 8, contain at least one of the required CAs in their default trusted CA
    list. </p> </li> </ul> <p>When accessing the Lambda management console or
    Lambda API endpoints, whether through browsers or programmatically, you will
    need to ensure your client machines support any of the following CAs: </p>
    <ul> <li> <p>Amazon Root CA 1</p> </li> <li> <p>Starfield Services Root
    Certificate Authority - G2</p> </li> <li> <p>Starfield Class 2 Certification
    Authority</p> </li> </ul> <p>Root certificates from the first two
    authorities are available from <a
    href="https://www.amazontrust.com/repository/">Amazon trust services</a>,
    but keeping your computer up-to-date is the more straightforward solution.
    To learn more about ACM-provided certificates, see <a
    href="http://aws.amazon.com/certificate-manager/faqs/#certificates">Amazon
    Web Services Certificate Manager FAQs.</a> </p>
paths:
  /2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy:
    GET:
      summary: Getlayerversionpolicy
      description: >-
        Returns the permission policy for a version of an Lambda layer. For more
        information, see AddLayerVersionPermission.
      operationId: amazonWebServicesGetLayerVersionPolicy
  /2015-03-31/functions/{FunctionName}/policy:
    GET:
      summary: Getpolicy
      description: Returns the resource-based IAM policy for a function, version, or alias.
      operationId: amazonWebServicesGetPolicy
  /2015-03-31/functions/{FunctionName}/aliases:
    GET:
      summary: Listaliases
      description: Returns a list of aliases for a Lambda function.
      operationId: amazonWebServicesListAliases
  /2020-04-22/code-signing-configs/:
    GET:
      summary: Listcodesigningconfigs
      description: >-
        Returns a list of code signing configurations. A request returns up to
        10,000 configurations per call. You can use the MaxItems parameter to
        return fewer configurations per call. 
      operationId: amazonWebServicesListCodeSigningConfigs
  /2015-03-31/event-source-mappings/:
    GET:
      summary: Listeventsourcemappings
      description: >-
        Lists event source mappings. Specify an EventSourceArn to show only
        event source mappings for a single event source.
      operationId: amazonWebServicesListEventSourceMappings
  /2015-03-31/functions:
    POST:
      summary: Createfunction
      description: >-
        Creates a Lambda function. To create a function, you need a deployment
        package and an execution role. The deployment package is a .zip file
        archive or container image that contains your function code. The
        execution role grants the function permission to use Amazon Web
        Services, such as Amazon CloudWatch Logs for log streaming and X-Ray for
        request tracing. If the deployment package is a container image, then
        you set the package type to Image. For a container image, the code
        property must include the URI of a container image in the Amazon ECR
        registry. You do not need to specify the handler and runtime properties.
        If the deployment package is a .zip file archive, then you set the
        package type to Zip. For a .zip file archive, the code property
        specifies the location of the .zip file. You must also specify the
        handler and runtime properties. The code in the deployment package must
        be compatible with the target instruction set architecture of the
        function (x86-64 or arm64). If you do not specify the architecture, then
        the default value is x86-64. When you create a function, Lambda
        provisions an instance of the function and its supporting resources. If
        your function connects to a VPC, this process can take a minute or so.
        During this time, you can't invoke or modify the function. The State,
        StateReason, and StateReasonCode fields in the response from
        GetFunctionConfiguration indicate when the function is ready to invoke.
        For more information, see Lambda function states. A function has an
        unpublished version, and can have published versions and aliases. The
        unpublished version changes when you update your function's code and
        configuration. A published version is a snapshot of your function code
        and configuration that can't be changed. An alias is a named resource
        that maps to a version, and can be changed to map to a different
        version. Use the Publish parameter to create version 1 of your function
        from its initial configuration. The other parameters let you configure
        version-specific and function-level settings. You can modify
        version-specific settings later with UpdateFunctionConfiguration.
        Function-level settings apply to both the unpublished and published
        versions of the function, and include tags (TagResource) and
        per-function concurrency limits (PutFunctionConcurrency). You can use
        code signing if your deployment package is a .zip file archive. To
        enable code signing for this function, specify the ARN of a code-signing
        configuration. When a user attempts to deploy a code package with
        UpdateFunctionCode, Lambda checks that the code package has a valid
        signature from a trusted publisher. The code-signing configuration
        includes set of signing profiles, which define the trusted publishers
        for this function. If another Amazon Web Services account or an Amazon
        Web Service invokes your function, use AddPermission to grant permission
        by creating a resource-based Identity and Access Management (IAM)
        policy. You can grant permissions at the function level, on a version,
        or on an alias. To invoke your function directly, use Invoke. To invoke
        your function in response to events in other Amazon Web Services, create
        an event source mapping (CreateEventSourceMapping), or configure a
        function trigger in the other service. For more information, see
        Invoking Lambda functions.
      operationId: amazonWebServicesCreateFunction
  /2021-10-31/functions/{FunctionName}/url:
    PUT:
      summary: Updatefunctionurlconfig
      description: Updates the configuration for a Lambda function URL.
      operationId: amazonWebServicesUpdateFunctionUrlConfig
  /2015-03-31/functions/{FunctionName}/aliases/{Name}:
    PUT:
      summary: Updatealias
      description: Updates the configuration of a Lambda function alias.
      operationId: amazonWebServicesUpdateAlias
  /2020-04-22/code-signing-configs/{CodeSigningConfigArn}:
    PUT:
      summary: Updatecodesigningconfig
      description: >-
        Update the code signing configuration. Changes to the code signing
        configuration take effect the next time a user tries to deploy a code
        package to the function. 
      operationId: amazonWebServicesUpdateCodeSigningConfig
  /2015-03-31/event-source-mappings/{UUID}:
    PUT:
      summary: Updateeventsourcemapping
      description: >-
        Updates an event source mapping. You can change the function that Lambda
        invokes, or pause invocation and resume later from the same location.
        For details about how to configure different event sources, see the
        following topics.      Amazon DynamoDB Streams      Amazon Kinesis     
        Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache
        Kafka      Amazon DocumentDB    The following error handling options are
        available only for stream sources (DynamoDB and Kinesis):   
        BisectBatchOnFunctionError – If the function returns an error, split the
        batch in two and retry.    DestinationConfig – Send discarded records to
        an Amazon SQS queue or Amazon SNS topic.    MaximumRecordAgeInSeconds –
        Discard records older than the specified age. The default value is
        infinite (-1). When set to infinite (-1), failed records are retried
        until the record expires    MaximumRetryAttempts – Discard records after
        the specified number of retries. The default value is infinite (-1).
        When set to infinite (-1), failed records are retried until the record
        expires.    ParallelizationFactor – Process multiple batches from each
        shard concurrently.   For information about which configuration
        parameters apply to each event source, see the following topics.    
        Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon
        MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon
        DocumentDB   
      operationId: amazonWebServicesUpdateEventSourceMapping
  /2015-03-31/functions/{FunctionName}:
    GET:
      summary: Getfunction
      description: >-
        Returns information about the function or function version, with a link
        to download the deployment package that's valid for 10 minutes. If you
        specify a function version, only details that are specific to that
        version are returned.
      operationId: amazonWebServicesGetFunction
  /2020-06-30/functions/{FunctionName}/code-signing-config:
    PUT:
      summary: Putfunctioncodesigningconfig
      description: >-
        Update the code signing configuration for the function. Changes to the
        code signing configuration take effect the next time a user tries to
        deploy a code package to the function. 
      operationId: amazonWebServicesPutFunctionCodeSigningConfig
  /2017-10-31/functions/{FunctionName}/concurrency:
    PUT:
      summary: Putfunctionconcurrency
      description: >-
        Sets the maximum number of simultaneous executions for a function, and
        reserves capacity for that concurrency level. Concurrency settings apply
        to the function as a whole, including all published versions and the
        unpublished version. Reserving concurrency both ensures that your
        function has capacity to process the specified number of events
        simultaneously, and prevents it from scaling beyond that level. Use
        GetFunction to see the current setting for a function. Use
        GetAccountSettings to see your Regional concurrency limit. You can
        reserve concurrency for as many functions as you like, as long as you
        leave at least 100 simultaneous executions unreserved for functions that
        aren't configured with a per-function limit. For more information, see
        Lambda function scaling.
      operationId: amazonWebServicesPutFunctionConcurrency
  /2019-09-25/functions/{FunctionName}/event-invoke-config:
    POST:
      summary: Updatefunctioneventinvokeconfig
      description: >-
        Updates the configuration for asynchronous invocation for a function,
        version, or alias. To configure options for asynchronous invocation, use
        PutFunctionEventInvokeConfig.
      operationId: amazonWebServicesUpdateFunctionEventInvokeConfig
  /2018-10-31/layers/{LayerName}/versions/{VersionNumber}:
    GET:
      summary: Getlayerversion
      description: >-
        Returns information about a version of an Lambda layer, with a link to
        download the layer archive that's valid for 10 minutes.
      operationId: amazonWebServicesGetLayerVersion
  /2019-09-30/functions/{FunctionName}/provisioned-concurrency:
    PUT:
      summary: Putprovisionedconcurrencyconfig
      description: >-
        Adds a provisioned concurrency configuration to a function's alias or
        version.
      operationId: amazonWebServicesPutProvisionedConcurrencyConfig
  /2016-08-19/account-settings/:
    GET:
      summary: Getaccountsettings
      description: >-
        Retrieves details about your account's limits and usage in an Amazon Web
        Services Region.
      operationId: amazonWebServicesGetAccountSettings
  /2019-09-30/functions/{FunctionName}/concurrency:
    GET:
      summary: Getfunctionconcurrency
      description: >-
        Returns details about the reserved concurrency configuration for a
        function. To set a concurrency limit for a function, use
        PutFunctionConcurrency.
      operationId: amazonWebServicesGetFunctionConcurrency
  /2015-03-31/functions/{FunctionName}/configuration:
    PUT:
      summary: Updatefunctionconfiguration
      description: >-
        Modify the version-specific settings of a Lambda function. When you
        update a function, Lambda provisions an instance of the function and its
        supporting resources. If your function connects to a VPC, this process
        can take a minute. During this time, you can't modify the function, but
        you can still invoke it. The LastUpdateStatus, LastUpdateStatusReason,
        and LastUpdateStatusReasonCode fields in the response from
        GetFunctionConfiguration indicate when the update is complete and the
        function is processing events with the new configuration. For more
        information, see Lambda function states. These settings can vary between
        versions of a function and are locked when you publish a version. You
        can't modify the configuration of a published version, only the
        unpublished version. To configure function concurrency, use
        PutFunctionConcurrency. To grant invoke permissions to an Amazon Web
        Services account or Amazon Web Service, use AddPermission.
      operationId: amazonWebServicesUpdateFunctionConfiguration
  /2018-10-31/layers?find=LayerVersion:
    GET:
      summary: Getlayerversionbyarn
      description: >-
        Returns information about a version of an Lambda layer, with a link to
        download the layer archive that's valid for 10 minutes.
      operationId: amazonWebServicesGetLayerVersionByArn
  /2021-07-20/functions/{FunctionName}/runtime-management-config:
    PUT:
      summary: Putruntimemanagementconfig
      description: >-
        Sets the runtime management configuration for a function's version. For
        more information, see Runtime updates.
      operationId: amazonWebServicesPutRuntimeManagementConfig
  /2015-03-31/functions/{FunctionName}/invocations:
    POST:
      summary: Invoke
      description: >-
        Invokes a Lambda function. You can invoke a function synchronously (and
        wait for the response), or asynchronously. By default, Lambda invokes
        your function synchronously (i.e. theInvocationType is RequestResponse).
        To invoke a function asynchronously, set InvocationType to Event. Lambda
        passes the ClientContext object to your function for synchronous
        invocations only. For synchronous invocation, details about the function
        response, including errors, are included in the response body and
        headers. For either invocation type, you can find more information in
        the execution log and trace. When an error occurs, your function may be
        invoked multiple times. Retry behavior varies by error type, client,
        event source, and invocation type. For example, if you invoke a function
        asynchronously and it returns an error, Lambda executes the function up
        to two more times. For more information, see Error handling and
        automatic retries in Lambda. For asynchronous invocation, Lambda adds
        events to a queue before sending them to your function. If your function
        does not have enough capacity to keep up with the queue, events may be
        lost. Occasionally, your function may receive the same event multiple
        times, even if no error occurs. To retain events that were not
        processed, configure your function with a dead-letter queue. The status
        code in the API response doesn't reflect function errors. Error codes
        are reserved for errors that prevent your function from executing, such
        as permissions errors, quota errors, or issues with your function's code
        and configuration. For example, Lambda returns TooManyRequestsException
        if running the function would cause you to exceed a concurrency limit at
        either the account level (ConcurrentInvocationLimitExceeded) or function
        level (ReservedFunctionConcurrentInvocationLimitExceeded). For functions
        with a long timeout, your client might disconnect during synchronous
        invocation while it waits for a response. Configure your HTTP client,
        SDK, firewall, proxy, or operating system to allow for long connections
        with timeout or keep-alive settings. This operation requires permission
        for the lambda:InvokeFunction action. For details on how to set up
        permissions for cross-account invocations, see Granting function access
        to other accounts.
      operationId: amazonWebServicesInvoke
  /2014-11-13/functions/{FunctionName}/invoke-async/:
    POST:
      summary: Invokeasync
      description: ' For asynchronous function invocation, use Invoke.  Invokes a function asynchronously.'
      operationId: amazonWebServicesInvokeAsync
  /2021-11-15/functions/{FunctionName}/response-streaming-invocations:
    POST:
      summary: Invokewithresponsestream
      description: >-
        Configure your Lambda functions to stream response payloads back to
        clients. For more information, see Configuring a Lambda function to
        stream responses. This operation requires permission for the
        lambda:InvokeFunction action. For details on how to set up permissions
        for cross-account invocations, see Granting function access to other
        accounts.
      operationId: amazonWebServicesInvokeWithResponseStream
  /2019-09-25/functions/{FunctionName}/event-invoke-config/list:
    GET:
      summary: Listfunctioneventinvokeconfigs
      description: >-
        Retrieves a list of configurations for asynchronous invocation for a
        function. To configure options for asynchronous invocation, use
        PutFunctionEventInvokeConfig.
      operationId: amazonWebServicesListFunctionEventInvokeConfigs
  /2021-10-31/functions/{FunctionName}/urls:
    GET:
      summary: Listfunctionurlconfigs
      description: Returns a list of Lambda function URLs for the specified function.
      operationId: amazonWebServicesListFunctionUrlConfigs
  /2015-03-31/functions/:
    GET:
      summary: Listfunctions
      description: >-
        Returns a list of Lambda functions, with the version-specific
        configuration of each. Lambda returns up to 50 functions per call. Set
        FunctionVersion to ALL to include all published versions of each
        function in addition to the unpublished version.  The ListFunctions
        operation returns a subset of the FunctionConfiguration fields. To get
        the additional fields (State, StateReasonCode, StateReason,
        LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode,
        RuntimeVersionConfig) for a function or version, use GetFunction. 
      operationId: amazonWebServicesListFunctions
  /2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions:
    GET:
      summary: Listfunctionsbycodesigningconfig
      description: >-
        List the functions that use the specified code signing configuration.
        You can use this method prior to deleting a code signing configuration,
        to verify that no functions are using it.
      operationId: amazonWebServicesListFunctionsByCodeSigningConfig
  /2018-10-31/layers/{LayerName}/versions:
    POST:
      summary: Publishlayerversion
      description: >-
        Creates an Lambda layer from a ZIP archive. Each time you call
        PublishLayerVersion with the same layer name, a new version is created.
        Add layers to your function with CreateFunction or
        UpdateFunctionConfiguration.
      operationId: amazonWebServicesPublishLayerVersion
  /2018-10-31/layers:
    GET:
      summary: Listlayers
      description: >-
        Lists Lambda layers and shows information about the latest version of
        each. Specify a runtime identifier to list only layers that indicate
        that they're compatible with that runtime. Specify a compatible
        architecture to include only layers that are compatible with that
        instruction set architecture.
      operationId: amazonWebServicesListLayers
  /2019-09-30/functions/{FunctionName}/provisioned-concurrency?List=ALL:
    GET:
      summary: Listprovisionedconcurrencyconfigs
      description: >-
        Retrieves a list of provisioned concurrency configurations for a
        function.
      operationId: amazonWebServicesListProvisionedConcurrencyConfigs
  /2017-03-31/tags/{ARN}:
    DELETE:
      summary: Untagresource
      description: Removes tags from a function.
      operationId: amazonWebServicesUntagResource
  /2015-03-31/functions/{FunctionName}/versions:
    POST:
      summary: Publishversion
      description: >-
        Creates a version from the current code and configuration of a function.
        Use versions to create a snapshot of your function code and
        configuration that doesn't change. Lambda doesn't publish a version if
        the function's configuration and code haven't changed since the last
        version. Use UpdateFunctionCode or UpdateFunctionConfiguration to update
        the function before publishing a version. Clients can invoke versions
        directly or with an alias. To create an alias, use CreateAlias.
      operationId: amazonWebServicesPublishVersion
  /2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}:
    DELETE:
      summary: Removelayerversionpermission
      description: >-
        Removes a statement from the permissions policy for a version of an
        Lambda layer. For more information, see AddLayerVersionPermission.
      operationId: amazonWebServicesRemoveLayerVersionPermission
  /2015-03-31/functions/{FunctionName}/policy/{StatementId}:
    DELETE:
      summary: Removepermission
      description: >-
        Revokes function-use permission from an Amazon Web Service or another
        Amazon Web Services account. You can get the ID of the statement from
        the output of GetPolicy.
      operationId: amazonWebServicesRemovePermission
  /2015-03-31/functions/{FunctionName}/code:
    PUT:
      summary: Updatefunctioncode
      description: >-
        Updates a Lambda function's code. If code signing is enabled for the
        function, the code package must be signed by a trusted publisher. For
        more information, see Configuring code signing for Lambda. If the
        function's package type is Image, then you must specify the code package
        in ImageUri as the URI of a container image in the Amazon ECR registry.
        If the function's package type is Zip, then you must specify the
        deployment package as a .zip file archive. Enter the Amazon S3 bucket
        and key of the code .zip file location. You can also provide the
        function code inline using the ZipFile field. The code in the deployment
        package must be compatible with the target instruction set architecture
        of the function (x86-64 or arm64). The function's code is locked when
        you publish a version. You can't modify the code of a published version,
        only the unpublished version.  For a function defined as a container
        image, Lambda resolves the image tag to an image digest. In Amazon ECR,
        if you update the image tag to a new image, Lambda does not
        automatically update the function. 
      operationId: amazonWebServicesUpdateFunctionCode
tags: []
