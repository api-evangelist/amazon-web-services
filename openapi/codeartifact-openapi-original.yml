openapi: 3.1.0
info:
  title: codeartifact
  description: >-
    <p> CodeArtifact is a fully managed artifact repository compatible with
    language-native package managers and build tools such as npm, Apache Maven,
    pip, and dotnet. You can use CodeArtifact to share packages with development
    teams and pull packages. Packages can be pulled from both public and
    CodeArtifact repositories. You can also create an upstream relationship
    between a CodeArtifact repository and another repository, which effectively
    merges their contents from the point of view of a package manager client.
    </p> <p> <b>CodeArtifact Components</b> </p> <p>Use the information in this
    guide to help you work with the following CodeArtifact components:</p> <ul>
    <li> <p> <b>Repository</b>: A CodeArtifact repository contains a set of <a
    href="https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html#welcome-concepts-package-version">package
    versions</a>, each of which maps to a set of assets, or files. Repositories
    are polyglot, so a single repository can contain packages of any supported
    type. Each repository exposes endpoints for fetching and publishing packages
    using tools like the <b> <code>npm</code> </b> CLI, the Maven CLI (<b>
    <code>mvn</code> </b>), Python CLIs (<b> <code>pip</code> </b> and
    <code>twine</code>), and NuGet CLIs (<code>nuget</code> and
    <code>dotnet</code>).</p> </li> <li> <p> <b>Domain</b>: Repositories are
    aggregated into a higher-level entity known as a <i>domain</i>. All package
    assets and metadata are stored in the domain, but are consumed through
    repositories. A given package asset, such as a Maven JAR file, is stored
    once per domain, no matter how many repositories it's present in. All of the
    assets and metadata in a domain are encrypted with the same customer master
    key (CMK) stored in Key Management Service (KMS).</p> <p>Each repository is
    a member of a single domain and can't be moved to a different domain.</p>
    <p>The domain allows organizational policy to be applied across multiple
    repositories, such as which accounts can access repositories in the domain,
    and which public repositories can be used as sources of packages.</p>
    <p>Although an organization can have multiple domains, we recommend a single
    production domain that contains all published artifacts so that teams can
    find and share packages across their organization.</p> </li> <li> <p>
    <b>Package</b>: A <i>package</i> is a bundle of software and the metadata
    required to resolve dependencies and install the software. CodeArtifact
    supports <a
    href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-npm.html">npm</a>,
    <a
    href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-python.html">PyPI</a>,
    <a
    href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-maven">Maven</a>,
    and <a
    href="https://docs.aws.amazon.com/codeartifact/latest/ug/using-nuget">NuGet</a>
    package formats.</p> <p>In CodeArtifact, a package consists of:</p> <ul>
    <li> <p>A <i>name</i> (for example, <code>webpack</code> is the name of a
    popular npm package)</p> </li> <li> <p>An optional namespace (for example,
    <code>@types</code> in <code>@types/node</code>)</p> </li> <li> <p>A set of
    versions (for example, <code>1.0.0</code>, <code>1.0.1</code>,
    <code>1.0.2</code>, etc.)</p> </li> <li> <p> Package-level metadata (for
    example, npm tags)</p> </li> </ul> </li> <li> <p> <b>Package version</b>: A
    version of a package, such as <code>@types/node 12.6.9</code>. The version
    number format and semantics vary for different package formats. For example,
    npm package versions must conform to the <a
    href="https://semver.org/">Semantic Versioning specification</a>. In
    CodeArtifact, a package version consists of the version identifier, metadata
    at the package version level, and a set of assets.</p> </li> <li> <p>
    <b>Upstream repository</b>: One repository is <i>upstream</i> of another
    when the package versions in it can be accessed from the repository endpoint
    of the downstream repository, effectively merging the contents of the two
    repositories from the point of view of a client. CodeArtifact allows
    creating an upstream relationship between two repositories.</p> </li> <li>
    <p> <b>Asset</b>: An individual file stored in CodeArtifact associated with
    a package version, such as an npm <code>.tgz</code> file or Maven POM and
    JAR files.</p> </li> </ul> <p>CodeArtifact supports these operations:</p>
    <ul> <li> <p> <code>AssociateExternalConnection</code>: Adds an existing
    external connection to a repository. </p> </li> <li> <p>
    <code>CopyPackageVersions</code>: Copies package versions from one
    repository to another repository in the same domain.</p> </li> <li> <p>
    <code>CreateDomain</code>: Creates a domain</p> </li> <li> <p>
    <code>CreateRepository</code>: Creates a CodeArtifact repository in a
    domain. </p> </li> <li> <p> <code>DeleteDomain</code>: Deletes a domain. You
    cannot delete a domain that contains repositories. </p> </li> <li> <p>
    <code>DeleteDomainPermissionsPolicy</code>: Deletes the resource policy that
    is set on a domain.</p> </li> <li> <p> <code>DeletePackage</code>: Deletes a
    package and all associated package versions.</p> </li> <li> <p>
    <code>DeletePackageVersions</code>: Deletes versions of a package. After a
    package has been deleted, it can be republished, but its assets and metadata
    cannot be restored because they have been permanently removed from
    storage.</p> </li> <li> <p> <code>DeleteRepository</code>: Deletes a
    repository. </p> </li> <li> <p>
    <code>DeleteRepositoryPermissionsPolicy</code>: Deletes the resource policy
    that is set on a repository.</p> </li> <li> <p> <code>DescribeDomain</code>:
    Returns a <code>DomainDescription</code> object that contains information
    about the requested domain.</p> </li> <li> <p> <code>DescribePackage</code>:
    Returns a <a
    href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a>
    object that contains details about a package. </p> </li> <li> <p>
    <code>DescribePackageVersion</code>: Returns a <a
    href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
    object that contains details about a package version. </p> </li> <li> <p>
    <code>DescribeRepository</code>: Returns a
    <code>RepositoryDescription</code> object that contains detailed information
    about the requested repository. </p> </li> <li> <p>
    <code>DisposePackageVersions</code>: Disposes versions of a package. A
    package version with the status <code>Disposed</code> cannot be restored
    because they have been permanently removed from storage.</p> </li> <li> <p>
    <code>DisassociateExternalConnection</code>: Removes an existing external
    connection from a repository. </p> </li> <li> <p>
    <code>GetAuthorizationToken</code>: Generates a temporary authorization
    token for accessing repositories in the domain. The token expires the
    authorization period has passed. The default authorization period is 12
    hours and can be customized to any length with a maximum of 12 hours.</p>
    </li> <li> <p> <code>GetDomainPermissionsPolicy</code>: Returns the policy
    of a resource that is attached to the specified domain. </p> </li> <li> <p>
    <code>GetPackageVersionAsset</code>: Returns the contents of an asset that
    is in a package version. </p> </li> <li> <p>
    <code>GetPackageVersionReadme</code>: Gets the readme file or descriptive
    text for a package version.</p> </li> <li> <p>
    <code>GetRepositoryEndpoint</code>: Returns the endpoint of a repository for
    a specific package format. A repository has one endpoint for each package
    format: </p> <ul> <li> <p> <code>maven</code> </p> </li> <li> <p>
    <code>npm</code> </p> </li> <li> <p> <code>nuget</code> </p> </li> <li> <p>
    <code>pypi</code> </p> </li> </ul> </li> <li> <p>
    <code>GetRepositoryPermissionsPolicy</code>: Returns the resource policy
    that is set on a repository. </p> </li> <li> <p> <code>ListDomains</code>:
    Returns a list of <code>DomainSummary</code> objects. Each returned
    <code>DomainSummary</code> object contains information about a domain.</p>
    </li> <li> <p> <code>ListPackages</code>: Lists the packages in a
    repository.</p> </li> <li> <p> <code>ListPackageVersionAssets</code>: Lists
    the assets for a given package version.</p> </li> <li> <p>
    <code>ListPackageVersionDependencies</code>: Returns a list of the direct
    dependencies for a package version. </p> </li> <li> <p>
    <code>ListPackageVersions</code>: Returns a list of package versions for a
    specified package in a repository.</p> </li> <li> <p>
    <code>ListRepositories</code>: Returns a list of repositories owned by the
    Amazon Web Services account that called this method.</p> </li> <li> <p>
    <code>ListRepositoriesInDomain</code>: Returns a list of the repositories in
    a domain.</p> </li> <li> <p> <code>PublishPackageVersion</code>: Creates a
    new package version containing one or more assets.</p> </li> <li> <p>
    <code>PutDomainPermissionsPolicy</code>: Attaches a resource policy to a
    domain.</p> </li> <li> <p> <code>PutPackageOriginConfiguration</code>: Sets
    the package origin configuration for a package, which determine how new
    versions of the package can be added to a specific repository.</p> </li>
    <li> <p> <code>PutRepositoryPermissionsPolicy</code>: Sets the resource
    policy on a repository that specifies permissions to access it. </p> </li>
    <li> <p> <code>UpdatePackageVersionsStatus</code>: Updates the status of one
    or more versions of a package.</p> </li> <li> <p>
    <code>UpdateRepository</code>: Updates the properties of a repository.</p>
    </li> </ul>
paths:
  /v1/repository/external-connection:
    DELETE:
      summary: Disassociateexternalconnection
      description: ' Removes an existing external connection from a repository. '
      operationId: amazonWebServicesDisassociateExternalConnection
  /v1/package/versions/copy:
    POST:
      summary: Copypackageversions
      description: ' Copies package versions from one repository to another repository in the same domain.    You must specify versions or versionRevisions. You cannot specify both.  '
      operationId: amazonWebServicesCopyPackageVersions
  /v1/domain:
    GET:
      summary: Describedomain
      description: ' Returns a DomainDescription object that contains information about the requested domain. '
      operationId: amazonWebServicesDescribeDomain
  /v1/repository:
    PUT:
      summary: Updaterepository
      description: ' Update the properties of a repository. '
      operationId: amazonWebServicesUpdateRepository
  /v1/domain/permissions/policy:
    PUT:
      summary: Putdomainpermissionspolicy
      description: ' Sets a resource policy on a domain that specifies permissions to access it.   When you call PutDomainPermissionsPolicy, the resource policy on the domain is ignored when evaluting permissions. This ensures that the owner of a domain cannot lock themselves out of the domain, which would prevent them from being able to update the resource policy. '
      operationId: amazonWebServicesPutDomainPermissionsPolicy
  /v1/package:
    POST:
      summary: Putpackageoriginconfiguration
      description: >-
        Sets the package origin configuration for a package. The package origin
        configuration determines how new versions of a package can be added to a
        repository. You can allow or block direct publishing of new package
        versions, or ingestion and retaining of new package versions from an
        external connection or upstream source. For more information about
        package origin controls and configuration, see Editing package origin
        controls in the CodeArtifact User Guide.  PutPackageOriginConfiguration
        can be called on a package that doesn't yet exist in the repository.
        When called on a package that does not exist, a package is created in
        the repository with no versions and the requested restrictions are set
        on the package. This can be used to preemptively block ingesting or
        retaining any versions from external connections or upstream
        repositories, or to block publishing any versions of the package into
        the repository before connecting any package managers or publishers to
        the repository.
      operationId: amazonWebServicesPutPackageOriginConfiguration
  /v1/package/versions/delete:
    POST:
      summary: Deletepackageversions
      description: ' Deletes one or more versions of a package. A deleted package version cannot be restored in your repository. If you want to remove a package version from your repository and be able to restore it later, set its status to Archived. Archived packages cannot be downloaded from a repository and don''t show up with list package APIs (for example, ListPackageVersions), but you can restore them using UpdatePackageVersionsStatus. '
      operationId: amazonWebServicesDeletePackageVersions
  /v1/repository/permissions/policies:
    DELETE:
      summary: Deleterepositorypermissionspolicy
      description: ' Deletes the resource policy that is set on a repository. After a resource policy is deleted, the permissions allowed and denied by the deleted policy are removed. The effect of deleting a resource policy might not be immediate.    Use DeleteRepositoryPermissionsPolicy with caution. After a policy is deleted, Amazon Web Services users, roles, and accounts lose permissions to perform the repository actions granted by the deleted policy.  '
      operationId: amazonWebServicesDeleteRepositoryPermissionsPolicy
  /v1/package/version:
    GET:
      summary: Describepackageversion
      description: ' Returns a PackageVersionDescription object that contains information about the requested package version. '
      operationId: amazonWebServicesDescribePackageVersion
  /v1/package/versions/dispose:
    POST:
      summary: Disposepackageversions
      description: ' Deletes the assets in package versions and sets the package versions'' status to Disposed. A disposed package version cannot be restored in your repository because its assets are deleted.   To view all disposed package versions in a repository, use ListPackageVersions and set the status parameter to Disposed.   To view information about a disposed package version, use DescribePackageVersion. '
      operationId: amazonWebServicesDisposePackageVersions
  /v1/authorization-token:
    POST:
      summary: Getauthorizationtoken
      description: ' Generates a temporary authorization token for accessing repositories in the domain. This API requires the codeartifact:GetAuthorizationToken and sts:GetServiceBearerToken permissions. For more information about authorization tokens, see CodeArtifact authentication and tokens.   CodeArtifact authorization tokens are valid for a period of 12 hours when created with the login command. You can call login periodically to refresh the token. When you create an authorization token with the GetAuthorizationToken API, you can set a custom authorization period, up to a maximum of 12 hours, with the durationSeconds parameter. The authorization period begins after login or GetAuthorizationToken is called. If login or GetAuthorizationToken is called while assuming a role, the token lifetime is independent of the maximum session duration of the role. For example, if you call sts assume-role and specify a session duration of 15 minutes, then generate a CodeArtifact authorization token, the token will be valid for the full authorization period even though this is longer than the 15-minute session duration. See Using IAM Roles for more information on controlling session duration.  '
      operationId: amazonWebServicesGetAuthorizationToken
  /v1/package/version/asset:
    GET:
      summary: Getpackageversionasset
      description: ' Returns an asset (or file) that is in a package. For example, for a Maven package version, use GetPackageVersionAsset to download a JAR file, a POM file, or any other assets in the package version. '
      operationId: amazonWebServicesGetPackageVersionAsset
  /v1/package/version/readme:
    GET:
      summary: Getpackageversionreadme
      description: ' Gets the readme file or descriptive text for a package version.   The returned text might contain formatting. For example, it might contain formatting for Markdown or reStructuredText. '
      operationId: amazonWebServicesGetPackageVersionReadme
  /v1/repository/endpoint:
    GET:
      summary: Getrepositoryendpoint
      description: ' Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each package format:     maven     npm     nuget     pypi   '
      operationId: amazonWebServicesGetRepositoryEndpoint
  /v1/repository/permissions/policy:
    PUT:
      summary: Putrepositorypermissionspolicy
      description: ' Sets the resource policy on a repository that specifies permissions to access it.   When you call PutRepositoryPermissionsPolicy, the resource policy on the repository is ignored when evaluting permissions. This ensures that the owner of a repository cannot lock themselves out of the repository, which would prevent them from being able to update the resource policy. '
      operationId: amazonWebServicesPutRepositoryPermissionsPolicy
  /v1/domains:
    POST:
      summary: Listdomains
      description: ' Returns a list of DomainSummary objects for all domains owned by the Amazon Web Services account that makes this call. Each returned DomainSummary object contains information about a domain. '
      operationId: amazonWebServicesListDomains
  /v1/package/version/assets:
    POST:
      summary: Listpackageversionassets
      description: ' Returns a list of AssetSummary objects for assets in a package version. '
      operationId: amazonWebServicesListPackageVersionAssets
  /v1/package/version/dependencies:
    POST:
      summary: Listpackageversiondependencies
      description: ' Returns the direct dependencies for a package version. The dependencies are returned as PackageDependency objects. CodeArtifact extracts the dependencies for a package version from the metadata file for the package format (for example, the package.json file for npm packages and the pom.xml file for Maven). Any package version dependencies that are not listed in the configuration file are not returned. '
      operationId: amazonWebServicesListPackageVersionDependencies
  /v1/package/versions:
    POST:
      summary: Listpackageversions
      description: ' Returns a list of PackageVersionSummary objects for package versions in a repository that match the request parameters. Package versions of all statuses will be returned by default when calling list-package-versions with no --status parameter. '
      operationId: amazonWebServicesListPackageVersions
  /v1/packages:
    POST:
      summary: Listpackages
      description: ' Returns a list of PackageSummary objects for packages in a repository that match the request parameters. '
      operationId: amazonWebServicesListPackages
  /v1/repositories:
    POST:
      summary: Listrepositories
      description: ' Returns a list of RepositorySummary objects. Each RepositorySummary contains information about a repository in the specified Amazon Web Services account and that matches the input parameters. '
      operationId: amazonWebServicesListRepositories
  /v1/domain/repositories:
    POST:
      summary: Listrepositoriesindomain
      description: ' Returns a list of RepositorySummary objects. Each RepositorySummary contains information about a repository in the specified domain and that matches the input parameters. '
      operationId: amazonWebServicesListRepositoriesInDomain
  /v1/tags:
    POST:
      summary: Listtagsforresource
      description: >-
        Gets information about Amazon Web Services tags for a specified Amazon
        Resource Name (ARN) in CodeArtifact.
      operationId: amazonWebServicesListTagsForResource
  /v1/package/version/publish:
    POST:
      summary: Publishpackageversion
      description: >-
        Creates a new package version containing one or more assets (or files).
        The unfinished flag can be used to keep the package version in the
        Unfinished state until all of its assets have been uploaded (see Package
        version status in the CodeArtifact user guide). To set the package
        version’s status to Published, omit the unfinished flag when uploading
        the final asset, or set the status using UpdatePackageVersionStatus.
        Once a package version’s status is set to Published, it cannot change
        back to Unfinished.  Only generic packages can be published using this
        API. For more information, see Using generic packages in the
        CodeArtifact User Guide. 
      operationId: amazonWebServicesPublishPackageVersion
  /v1/tag:
    POST:
      summary: Tagresource
      description: Adds or updates tags for a resource in CodeArtifact.
      operationId: amazonWebServicesTagResource
  /v1/untag:
    POST:
      summary: Untagresource
      description: Removes tags from a resource in CodeArtifact.
      operationId: amazonWebServicesUntagResource
  /v1/package/versions/update_status:
    POST:
      summary: Updatepackageversionsstatus
      description: ' Updates the status of one or more versions of a package. Using UpdatePackageVersionsStatus, you can update the status of package versions to Archived, Published, or Unlisted. To set the status of a package version to Disposed, use DisposePackageVersions. '
      operationId: amazonWebServicesUpdatePackageVersionsStatus
tags: []
